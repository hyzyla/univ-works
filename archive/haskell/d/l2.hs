{-- відбираємо лише елементи, 
що дорівнють значенню параметра фунції x 
і знаходимо довжину відфільтрованого списку, 
що по суті є кількостю шуканих елементів у списку --}
countElem :: Int -> [Int] -> Int
countElem x xs = length $ filter (x==) xs

{-- вібриємо лише ті елементи, що увійшли у список рівно три рази --}
taskElements :: [Int] -> [Int]
taskElements xs = [x | x <- xs, countElem x xs == 3]

{- проходимося по першому списку і відбираємо лише ті елемети, 
що знаходять у списку, який являє собою список елементів, 
що зустрілися тричі у другому списку-}
task :: [Int] -> [Int] -> [Int]
task xs ys = [x | x <- xs, elem x (taskElements ys)]

main = do  
    print $ task [1,1,2,3,4,4,5,6,7] [1,2,2,3,3,1,2, 1]