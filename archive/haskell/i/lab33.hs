{- Залишити у першоми списку елементи, що мають парну кількість входжень у другий список. -}

{-- відбираємо лише елементи, 
    що дорівнють значенню параметра фунції x 
    і знаходимо довжину відфільтрованого списку, 
    що по суті є кількостю шуканих елементів у списку --}
countElem :: Int -> [Int] -> Int
countElem x xs = length $ filter (x==) xs

{-- вібриємо лише ті елементи, 
    що увійшли у список парну кількість раз --}
deleteElem :: [Int] -> [Int]
deleteElem xs = [x | x <- xs, even (countElem x xs)]

{- проходимося по першому списку і відбираємо лише ті елемети, 
    що знаходять у списку, який являє собою список елементів, 
    що зустрілися тричі у другому списку -}
task :: [Int] -> [Int] -> [Int]
task xs ys = [x | x <- xs, elem x (deleteElem ys)]

main = print $ task [1,1,2,3,4,4,5,6,7] [1,2,2,3,3,1,2, 1]
